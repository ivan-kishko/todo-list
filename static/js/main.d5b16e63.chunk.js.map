{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","RoutesTodoList.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","errorMessage","style","color","onClickAddItem","validTitle","trim","addItem","className","value","onChange","e","currentTarget","onKeyPress","key","onClick","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","setTempTitle","tempTitle","onBlur","autoFocus","onDoubleClick","TodoList","tasksJSXElements","tasks","map","task","id","isDone","type","checked","changeTaskStatus","todoListID","changeTaskTitle","removeTask","changeTodoListTitle","removeTodoList","addTask","filter","changeTodoListFilter","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","tl","copyTasks","newTask","taskID","t","taskId","todoListComponents","tasksForTodoList","getFilteredTasks","newTodoListId","newTodoList","PATH","Routes","path","exact","render","to","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d5b16e63.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>('');\r\n    const [error, setError] = useState<boolean>(false);\r\n\r\n    const errorMessage = error ? <div style={{color: \"red\"}}><b>title is required</b></div> : null\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const onClickAddItem = () => {\r\n        const validTitle = title.trim()\r\n        if (validTitle !== '') {\r\n            props.addItem(validTitle)\r\n            setTitle('')\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (title.trim() !== '') {\r\n            if (e.key === 'Enter') {\r\n                onClickAddItem()\r\n                setTitle('')\r\n            }\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input className={error ? \"error\": \"\"}\r\n                   value={title}\r\n                   onChange={onChangeTitle}\r\n                   onKeyPress={onKeyPressAddItem}/>\r\n            <button onClick={onClickAddItem}>+</button>\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        if(title.trim() !== \"\") {\r\n            setEditMode(false)\r\n            props.changeTitle(title)\r\n            setTempTitle(title)\r\n        } else {\r\n            setTitle(tempTitle)\r\n            setEditMode(false)\r\n        }\r\n    }\r\n\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onEnterOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.key === \"Enter\") {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n    //make onBlur return last title if empty field submitted\r\n    const [tempTitle, setTempTitle] = useState<string>(title)\r\n\r\n    return (\r\n        editMode\r\n            ? <input\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onBlur={offEditMode}\r\n                onKeyPress={onEnterOffEditMode}\r\n                autoFocus\r\n            />\r\n            : <span\r\n                onDoubleClick={onEditMode}\r\n            >{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilteredValuesType} from \"./App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\nexport type PropsTodoListType = {\r\n    todoListID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilteredValuesType\r\n    changeTodoListFilter: (filterValue: FilteredValuesType, todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nfunction TodoList(props: PropsTodoListType) {\r\n    const tasksJSXElements = props.tasks.map(task => {\r\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(task.id, e.currentTarget.checked, props.todoListID)\r\n        const removeTask = () => props.removeTask(task.id, props.todoListID)\r\n        const changeTaskTitle = (title: string) => props.changeTaskTitle(task.id, title, props.todoListID)\r\n        return (\r\n            <li key={task.id} className={task.isDone ? \"is-done\" : \"\"}>\r\n                <input type=\"checkbox\" checked={task.isDone} onChange={changeTaskStatus}/>\r\n                <EditableSpan title={task.title} changeTitle={changeTaskTitle}/>\r\n                {/*<span>{task.title} </span>*/}\r\n                <button onClick={removeTask}> x</button>\r\n            </li>\r\n        )\r\n    });\r\n\r\n    const onClickSetAllFilter = () => {\r\n        props.changeTodoListFilter(\"all\", props.todoListID)\r\n    }\r\n    const onClickSetActiveFilter = () => {\r\n        props.changeTodoListFilter(\"active\", props.todoListID)\r\n    }\r\n    const onClickSetCompletedFilter = () => {\r\n        props.changeTodoListFilter(\"completed\", props.todoListID)\r\n    }\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todoListID)\r\n    }\r\n\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.todoListID)\r\n    }\r\n    const changeTodoListTitle = (title: string) => {\r\n        props.changeTodoListTitle(title, props.todoListID)\r\n    }\r\n\r\n    return (\r\n        <div className=\"TodoList\">\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                    <button onClick={removeTodoList}>X</button>\r\n                </h3>\r\n                <AddItemForm addItem={addTask}/>\r\n                <ul>\r\n                    {tasksJSXElements}\r\n                </ul>\r\n                <div>\r\n                    <button className={props.filter === \"all\" ? \"active-filter\" : \"\"}\r\n                            onClick={onClickSetAllFilter}>All\r\n                    </button>\r\n                    <button className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                            onClick={onClickSetActiveFilter}>Active\r\n                    </button>\r\n                    <button className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                            onClick={onClickSetCompletedFilter}>Completed\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList, {TaskType} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\n\r\nexport type FilteredValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilteredValuesType\r\n\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n    //BLL\r\n    const todoListID_1 = v1()\r\n    const todoListID_2 = v1()\r\n\r\n    const [todoLists, setTodoLists] = useState<TodoListType[]>([\r\n        {id: todoListID_1, title: 'What to learn', filter: \"all\"},\r\n        {id: todoListID_2, title: 'What to buy', filter: \"all\"}\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false}\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Bread\", isDone: true},\r\n            {id: v1(), title: \"Coconut\", isDone: false},\r\n            {id: v1(), title: \"Pineapple\", isDone: false}\r\n        ],\r\n    })\r\n\r\n    function changeTodoListFilter(filter: FilteredValuesType, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter} : tl))\r\n    }\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        const copyTasks = {...tasks}\r\n        delete copyTasks[todoListID]\r\n        setTasks(copyTasks)\r\n    }\r\n    function addTodoList(title: string) {\r\n        const newTodoListId = v1();\r\n        const newTodoList: TodoListType = {id: newTodoListId, title, filter: \"all\"};\r\n\r\n        setTodoLists([...todoLists, newTodoList]);\r\n        setTasks({...tasks, [newTodoListId]: []});\r\n    }\r\n    function changeTodoListTitle(title: string, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, title: title} : tl))\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TaskType = {id: v1(), title, isDone: false}\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = [newTask, ...tasks[todoListID]]\r\n        setTasks(copyTasks)\r\n    }\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n        setTasks(copyTasks)\r\n        // if (filteredTasks !== tasks) { примерно как работает setState\r\n        // tasks = filteredTasks\r\n        // React.DOM.render() }\r\n    }\r\n    function changeTaskStatus(taskId: string, isDone: boolean, todoListID: string) {\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = copyTasks[todoListID].map(task => task.id === taskId ? {...task, isDone} : task)\r\n        setTasks(copyTasks)\r\n    }\r\n    function changeTaskTitle(taskId: string, title: string, todoListID: string) {\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = copyTasks[todoListID].map(task => task.id === taskId ? {...task, title} : task)\r\n        setTasks(copyTasks)\r\n    }\r\n\r\n    //UI\r\n    function getFilteredTasks(tl: TodoListType) {\r\n        switch (tl.filter) {\r\n            case \"active\":\r\n                return tasks[tl.id].filter(t => !t.isDone)\r\n            case \"completed\":\r\n                return tasks[tl.id].filter(t => t.isDone)\r\n            default:\r\n                return tasks[tl.id]\r\n        }\r\n    }\r\n\r\n    const todoListComponents = todoLists.map(tl => {\r\n        const tasksForTodoList = getFilteredTasks(tl)\r\n        return (\r\n            <TodoList\r\n                key={tl.id}\r\n                todoListID={tl.id}\r\n                title={tl.title}\r\n                tasks={tasksForTodoList}\r\n                filter={tl.filter}\r\n                removeTask={removeTask}\r\n                changeTodoListFilter={changeTodoListFilter}\r\n                addTask={addTask}\r\n                changeTaskStatus={changeTaskStatus}\r\n                removeTodoList={removeTodoList}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeTodoListTitle={changeTodoListTitle}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList} />\r\n            {todoListComponents}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport {Switch, Redirect, Route} from 'react-router-dom';\r\nimport App from \"./App\";\r\n\r\nexport const PATH = {\r\n    APP: '/todolist-app',\r\n}\r\n\r\nfunction Routes() {\r\n    return (\r\n        <div>\r\n            {/*Switch выбирает первый подходящий роут*/}\r\n            <Switch>\r\n\r\n                {/*в начале мы попадаем на страницу '/' и переходим сразу на страницу APP*/}\r\n                {/*exact нужен чтоб указать полное совподение (что после '/' ничего не будет)*/}\r\n                <Route path={'/'} exact render={() => <Redirect to={PATH.APP}/>}/>\r\n\r\n                {/*// add routes*/}\r\n                <Route path={PATH.APP} render={() => <App/>}/>\r\n\r\n                {/*у этого роута нет пути, он отрисуется если пользователь захочет попасть на несуществующую страницу*/}\r\n                {/*тут нужен компонент для роута 404*/}\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Routes\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport Routes from \"./RoutesTodoList\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Routes/>\r\n        {/*<App/>*/}\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}