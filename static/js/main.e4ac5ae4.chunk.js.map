{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","RoutesTodoList.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","onClickAddItem","validTitle","trim","addItem","TextField","variant","size","value","onChange","e","currentTarget","onKeyPress","key","onBlur","label","helperText","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","setTempTitle","tempTitle","autoFocus","onDoubleClick","TodoList","tasksJSXElements","tasks","map","task","id","className","isDone","Checkbox","checked","changeTaskStatus","todoListID","changeTaskTitle","removeTask","style","Delete","changeTodoListTitle","removeTodoList","addTask","listStyle","paddingLeft","alignContent","Button","marginLeft","marginRight","filter","changeTodoListFilter","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","tl","copyTasks","newTask","taskID","t","taskId","todoListComponents","tasksForTodoList","getFilteredTasks","Grid","item","xs","textAlign","wordBreak","Paper","elevation","padding","AppBar","position","Toolbar","justifyContent","Menu","Typography","Container","fixed","container","justify","newTodoListId","newTodoList","spacing","PATH","Routes","path","exact","render","to","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e4ac5ae4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>('');\r\n    const [error, setError] = useState<boolean>(false);\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const onClickAddItem = () => {\r\n        const validTitle = title.trim()\r\n        if (validTitle !== '') {\r\n            props.addItem(validTitle)\r\n            setTitle('')\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (title.trim() !== '') {\r\n            if (e.key === 'Enter') {\r\n                onClickAddItem()\r\n                setTitle('')\r\n            }\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                size={\"small\"}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onKeyPressAddItem}\r\n                onBlur={() => setError(false)}\r\n                label={\"Title\"}\r\n                error={error}\r\n                helperText={error && 'title is required'}\r\n            />\r\n            <IconButton onClick={onClickAddItem} color={\"primary\"} size={\"small\"}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        if(title.trim() !== \"\") {\r\n            setEditMode(false)\r\n            props.changeTitle(title)\r\n            setTempTitle(title)\r\n        } else {\r\n            setTitle(tempTitle)\r\n            setEditMode(false)\r\n        }\r\n    }\r\n\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onEnterOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.key === \"Enter\") {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n    //make onBlur or Enter press return last title if empty field submitted\r\n    const [tempTitle, setTempTitle] = useState<string>(title)\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onBlur={offEditMode}\r\n                onKeyPress={onEnterOffEditMode}\r\n                autoFocus\r\n            />\r\n            : <span\r\n                onDoubleClick={onEditMode}\r\n            >{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilteredValuesType} from \"./App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type PropsTodoListType = {\r\n    todoListID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilteredValuesType\r\n    changeTodoListFilter: (filterValue: FilteredValuesType, todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nfunction TodoList(props: PropsTodoListType) {\r\n    const tasksJSXElements = props.tasks.map(task => {\r\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(task.id, e.currentTarget.checked, props.todoListID)\r\n        const removeTask = () => props.removeTask(task.id, props.todoListID)\r\n        const changeTaskTitle = (title: string) => props.changeTaskTitle(task.id, title, props.todoListID)\r\n        return (\r\n            <li key={task.id}>\r\n                <span className={task.isDone ? \"is-done\" : \"\"}>\r\n                    <Checkbox\r\n                    size={\"small\"}\r\n                    color={\"primary\"}\r\n                    checked={task.isDone}\r\n                    onChange={changeTaskStatus}\r\n                    />\r\n                    <EditableSpan title={task.title} changeTitle={changeTaskTitle}/>\r\n                </span>\r\n                <IconButton onClick={removeTask} size={\"small\"} style={{color: 'black'}}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </li>\r\n        )\r\n    });\r\n\r\n    //Filters\r\n    const onClickSetAllFilter = () => {\r\n        props.changeTodoListFilter(\"all\", props.todoListID)\r\n    }\r\n    const onClickSetActiveFilter = () => {\r\n        props.changeTodoListFilter(\"active\", props.todoListID)\r\n    }\r\n    const onClickSetCompletedFilter = () => {\r\n        props.changeTodoListFilter(\"completed\", props.todoListID)\r\n    }\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todoListID)\r\n    }\r\n\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.todoListID)\r\n    }\r\n    const changeTodoListTitle = (title: string) => {\r\n        props.changeTodoListTitle(title, props.todoListID)\r\n    }\r\n\r\n    return (\r\n        <div className=\"TodoList\">\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                    <IconButton onClick={removeTodoList} size={\"small\"} style={{color: 'black'}}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTask}/>\r\n                <ul style={{listStyle: 'none', paddingLeft: '0', alignContent: 'flex-start'}}>\r\n                    {tasksJSXElements}\r\n                </ul>\r\n                <div>\r\n                    <Button\r\n                        style={{marginLeft: '1px', marginRight: '1px'}}\r\n                        size={\"small\"}\r\n                        variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                        color={\"primary\"}\r\n                        onClick={onClickSetAllFilter}>All\r\n                    </Button>\r\n                    <Button\r\n                        style={{marginLeft: '1px', marginRight: '1px'}}\r\n                        size={\"small\"}\r\n                        variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                        color={\"primary\"}\r\n                        onClick={onClickSetActiveFilter}>Active\r\n                    </Button>\r\n                    <Button\r\n                        style={{marginLeft: '1px', marginRight: '1px'}}\r\n                        size={\"small\"}\r\n                        variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                        color={\"primary\"}\r\n                        onClick={onClickSetCompletedFilter}>Completed\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList, {TaskType} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, IconButton, Typography, Toolbar, Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilteredValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilteredValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n    //BLL\r\n    const todoListID_1 = v1()\r\n    const todoListID_2 = v1()\r\n\r\n    const [todoLists, setTodoLists] = useState<TodoListType[]>([\r\n        {id: todoListID_1, title: 'What to learn', filter: \"all\"},\r\n        {id: todoListID_2, title: 'What to buy', filter: \"all\"}\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false}\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: \"Money\", isDone: true},\r\n            {id: v1(), title: \"Mansions\", isDone: true},\r\n            {id: v1(), title: \"Cars\", isDone: false},\r\n            {id: v1(), title: \"Time\", isDone: false}\r\n        ],\r\n    })\r\n\r\n    //todolist actions\r\n    function changeTodoListFilter(filter: FilteredValuesType, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter} : tl))\r\n    }\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        const copyTasks = {...tasks}\r\n        delete copyTasks[todoListID]\r\n        setTasks(copyTasks)\r\n    }\r\n    function addTodoList(title: string) {\r\n        const newTodoListId = v1();\r\n        const newTodoList: TodoListType = {id: newTodoListId, title, filter: \"all\"};\r\n\r\n        setTodoLists([...todoLists, newTodoList]);\r\n        setTasks({...tasks, [newTodoListId]: []});\r\n    }\r\n    function changeTodoListTitle(title: string, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, title: title} : tl))\r\n    }\r\n\r\n    //task actions\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TaskType = {id: v1(), title, isDone: false}\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = [newTask, ...tasks[todoListID]]\r\n        setTasks(copyTasks)\r\n    }\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n        setTasks(copyTasks)\r\n        // if (filteredTasks !== tasks) { примерно как работает setState\r\n        // tasks = filteredTasks\r\n        // React.DOM.render() }\r\n    }\r\n    function changeTaskStatus(taskId: string, isDone: boolean, todoListID: string) {\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = copyTasks[todoListID].map(task => task.id === taskId ? {...task, isDone} : task)\r\n        setTasks(copyTasks)\r\n    }\r\n    function changeTaskTitle(taskId: string, title: string, todoListID: string) {\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = copyTasks[todoListID].map(task => task.id === taskId ? {...task, title} : task)\r\n        setTasks(copyTasks)\r\n    }\r\n\r\n    //UI\r\n    function getFilteredTasks(tl: TodoListType) {\r\n        switch (tl.filter) {\r\n            case \"active\":\r\n                return tasks[tl.id].filter(t => !t.isDone)\r\n            case \"completed\":\r\n                return tasks[tl.id].filter(t => t.isDone)\r\n            default:\r\n                return tasks[tl.id]\r\n        }\r\n    }\r\n\r\n    //variable for todolist jsx\r\n    const todoListComponents = todoLists.map(tl => {\r\n        const tasksForTodoList = getFilteredTasks(tl)\r\n        return (\r\n            <Grid item xs={3} key={tl.id} style={{textAlign: 'center', wordBreak: 'break-word'}}>\r\n                <Paper elevation={5} style={{padding: '5px'}}>\r\n                    <TodoList\r\n                        todoListID={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodoList}\r\n                        filter={tl.filter}\r\n                        removeTask={removeTask}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton color={\"inherit\"}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={\"h6\"}>\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button\r\n                        color={\"inherit\"}\r\n                        variant={\"outlined\"}\r\n                    >Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0 10px 0'}} justify={\"center\"}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport {Switch, Redirect, Route} from 'react-router-dom';\r\nimport App from \"./App\";\r\n\r\nexport const PATH = {\r\n    APP: '/todolist-app',\r\n}\r\n\r\nfunction Routes() {\r\n    return (\r\n        <div>\r\n            {/*Switch выбирает первый подходящий роут*/}\r\n            <Switch>\r\n\r\n                {/*в начале мы попадаем на страницу '/' и переходим сразу на страницу APP*/}\r\n                {/*exact нужен чтоб указать полное совподение (что после '/' ничего не будет)*/}\r\n                <Route path={'/'} exact render={() => <Redirect to={PATH.APP}/>}/>\r\n\r\n                {/*// add routes*/}\r\n                <Route path={PATH.APP} render={() => <App/>}/>\r\n\r\n                {/*у этого роута нет пути, он отрисуется если пользователь захочет попасть на несуществующую страницу*/}\r\n                {/*тут нужен компонент для роута 404*/}\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Routes\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport Routes from \"./RoutesTodoList\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Routes/>\r\n        {/*<App/>*/}\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}