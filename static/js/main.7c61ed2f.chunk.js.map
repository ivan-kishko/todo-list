{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","TodoList.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","RoutesTodoList.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","size","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","setTempTitle","tempTitle","onBlur","autoFocus","onDoubleClick","Task","id","changeTaskTitle","console","log","changeTaskTitleCallback","useCallback","className","isDone","Checkbox","checked","changeTaskStatus","removeTask","style","Delete","TodoList","todoListID","tasks","filter","changeTodoListFilter","addTask","removeTodoList","changeTodoListTitle","tasksForTodoList","t","changeTaskStatusCallback","removeTaskCallback","onClickSetAllFilter","onClickSetActiveFilter","onClickSetCompletedFilter","addTaskCallback","removeTodoListCallback","changeTodoListTitleCallback","tasksJSXElements","map","task","listStyle","paddingLeft","alignContent","Button","marginLeft","marginRight","todoListID_1","v1","todoListID_2","initState","AppWithRedux","todoLists","useSelector","state","dispatch","useDispatch","type","changeTodoListFilterAC","removeTodoListAC","addTodoList","action","todoListId","addTodoListAC","changeTodoListTitleAC","addTaskAC","taskID","removeTaskAC","taskId","changeTaskStatusAC","changeTaskTitleAC","todoListComponents","tl","Grid","item","xs","textAlign","wordBreak","Paper","elevation","padding","AppBar","position","Toolbar","justifyContent","Menu","Typography","Container","fixed","container","justify","spacing","PATH","Routes","path","exact","render","to","rootReducer","combineReducers","newTask","newTasks","newTodoList","store","createStore","getState","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7c61ed2f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nconst AddItemForm = React.memo(function AddItemFormComponent(props: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) setError(null);\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant=\"outlined\"\r\n                size={\"small\"}\r\n                error={!!error}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label=\"Title\"\r\n                helperText={error}\r\n            />\r\n            <IconButton color=\"primary\" onClick={addItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function EditableSpanComponent(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        if(title.trim() !== \"\") {\r\n            setEditMode(false)\r\n            props.changeTitle(title)\r\n            setTempTitle(title)\r\n        } else {\r\n            setTitle(tempTitle)\r\n            setEditMode(false)\r\n        }\r\n    }\r\n\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onEnterOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.key === \"Enter\") {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n    //make onBlur or Enter press return last title if empty field submitted\r\n    const [tempTitle, setTempTitle] = useState<string>(title)\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onBlur={offEditMode}\r\n                onKeyPress={onEnterOffEditMode}\r\n                autoFocus\r\n            />\r\n            : <span\r\n                onDoubleClick={onEditMode}\r\n            >{props.title}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TaskPropsType = {\r\n    id: string;\r\n    title: string;\r\n    isDone: boolean;\r\n    changeTaskStatus: (id: string, isDone: boolean) => void\r\n    removeTask: (id: string) => void\r\n    changeTaskTitle: (id: string, title: string) => void\r\n}\r\n\r\nconst Task = React.memo(function TaskComponent({id, changeTaskTitle, ...props}: TaskPropsType) {\r\n    console.log('task')\r\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(id, e.currentTarget.checked)\r\n    const removeTask = () => props.removeTask(id)\r\n    const changeTaskTitleCallback = useCallback((title: string) => changeTaskTitle(id, title), [changeTaskTitle, id])\r\n\r\n    return (\r\n        <li key={id}>\r\n            <span className={props.isDone ? \"is-done\" : \"\"}>\r\n                <Checkbox\r\n                    size={\"small\"}\r\n                    color={\"primary\"}\r\n                    checked={props.isDone}\r\n                    onChange={changeTaskStatus}\r\n                />\r\n                <EditableSpan title={props.title} changeTitle={changeTaskTitleCallback}/>\r\n            </span>\r\n            <IconButton onClick={removeTask} size={\"small\"} style={{color: 'black'}}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})\r\n\r\nexport default Task;","import React, {useCallback} from 'react';\r\nimport {FilteredValuesType} from \"./AppWithRedux\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport Task from \"./Task\";\r\n\r\nexport type TodoListPropsType = {\r\n    todoListID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilteredValuesType\r\n    changeTodoListFilter: (filterValue: FilteredValuesType, todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nconst TodoList = React.memo(function TodoListComponent(props: TodoListPropsType) {\r\n\r\n    const {\r\n        todoListID,\r\n        title,\r\n        tasks,\r\n        filter,\r\n        changeTodoListFilter,\r\n        removeTask,\r\n        addTask,\r\n        changeTaskStatus,\r\n        removeTodoList,\r\n        changeTaskTitle,\r\n        changeTodoListTitle\r\n    } = props;\r\n\r\n    console.log('todolist')\r\n    //tasks filtering here so we can optimize rerender\r\n    let tasksForTodoList = tasks\r\n    if (filter === 'active') {\r\n        tasksForTodoList = tasksForTodoList.filter(t => !t.isDone)\r\n    }\r\n    if (filter === 'completed') {\r\n        tasksForTodoList = tasksForTodoList.filter(t => t.isDone)\r\n    }\r\n\r\n    const changeTaskStatusCallback = useCallback((id: string, isDone: boolean) => changeTaskStatus(id, isDone, todoListID), [changeTaskStatus, todoListID])\r\n    const removeTaskCallback = useCallback((id: string) => removeTask(id, todoListID), [removeTask, todoListID])\r\n    const changeTaskTitleCallback = useCallback((id: string, title: string) => changeTaskTitle(id, title, todoListID), [changeTaskTitle, todoListID])\r\n\r\n    //Filters\r\n    const onClickSetAllFilter = useCallback(() => {\r\n        changeTodoListFilter(\"all\", todoListID)\r\n    }, [changeTodoListFilter, todoListID])\r\n    const onClickSetActiveFilter = useCallback(() => {\r\n        changeTodoListFilter(\"active\", todoListID)\r\n    }, [changeTodoListFilter, todoListID])\r\n    const onClickSetCompletedFilter = useCallback(() => {\r\n        changeTodoListFilter(\"completed\", todoListID)\r\n    }, [changeTodoListFilter, todoListID])\r\n\r\n    const addTaskCallback = useCallback((title: string) => {\r\n        addTask(title, todoListID)\r\n    }, [addTask, todoListID])\r\n\r\n    const removeTodoListCallback = useCallback(() => {\r\n        removeTodoList(todoListID)\r\n    }, [removeTodoList, todoListID])\r\n    const changeTodoListTitleCallback = useCallback((title: string) => {\r\n        changeTodoListTitle(title, todoListID)\r\n    }, [changeTodoListTitle, todoListID])\r\n\r\n    const tasksJSXElements = tasksForTodoList.map(task => {\r\n        return (\r\n            <Task\r\n                key={task.id}\r\n                id={task.id}\r\n                title={task.title}\r\n                isDone={task.isDone}\r\n                changeTaskStatus={changeTaskStatusCallback}\r\n                removeTask={removeTaskCallback}\r\n                changeTaskTitle={changeTaskTitleCallback}\r\n            />\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className=\"TodoList\">\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan title={title} changeTitle={changeTodoListTitleCallback}/>\r\n                    <IconButton onClick={removeTodoListCallback} size={\"small\"} style={{color: 'black'}}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTaskCallback}/>\r\n                <ul style={{listStyle: 'none', paddingLeft: '0', alignContent: 'flex-start'}}>\r\n                    {tasksJSXElements}\r\n                </ul>\r\n                <div>\r\n                    <Button\r\n                        style={{marginLeft: '1px', marginRight: '1px'}}\r\n                        size={\"small\"}\r\n                        variant={filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                        color={\"primary\"}\r\n                        onClick={onClickSetAllFilter}>All\r\n                    </Button>\r\n                    <Button\r\n                        style={{marginLeft: '1px', marginRight: '1px'}}\r\n                        size={\"small\"}\r\n                        variant={filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                        color={\"primary\"}\r\n                        onClick={onClickSetActiveFilter}>Active\r\n                    </Button>\r\n                    <Button\r\n                        style={{marginLeft: '1px', marginRight: '1px'}}\r\n                        size={\"small\"}\r\n                        variant={filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                        color={\"primary\"}\r\n                        onClick={onClickSetCompletedFilter}>Completed\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default TodoList;","import {FilteredValuesType, TodoListType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    todoListID: string\r\n}\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todoListId: string\r\n}\r\ntype ChangeTodoListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    filter: FilteredValuesType\r\n    todoListID: string\r\n}\r\ntype ChangeTodoListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    title: string\r\n    todoListID: string\r\n}\r\nexport type TodoListsReducerActionsType = RemoveTodoListActionType\r\n    | AddTodoListActionType\r\n    | ChangeTodoListFilterActionType\r\n    | ChangeTodoListTitleActionType\r\n\r\n//initial state for todolists\r\nexport const todoListID_1 = v1()\r\nexport const todoListID_2 = v1()\r\nconst initState: TodoListType[] = [\r\n    {id: todoListID_1, title: 'What to learn', filter: \"all\"},\r\n    {id: todoListID_2, title: 'What to buy', filter: \"all\"}\r\n]\r\n\r\n//reducer for all actions on TodoList\r\nexport const todoListsReducer = (todoLists = initState, action: TodoListsReducerActionsType) => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\":\r\n            return todoLists.filter(tl => tl.id !== action.todoListID);\r\n        case \"ADD-TODOLIST\":\r\n            const newTodoList: TodoListType = {id: action.todoListId, title: action.title, filter: \"all\"};\r\n            return [...todoLists, newTodoList]\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return todoLists.map(tl => tl.id === action.todoListID ? {...tl, filter: action.filter} : tl);\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return todoLists.map(tl => tl.id === action.todoListID ? {...tl, title: action.title} : tl);\r\n        default:\r\n            return todoLists\r\n    }\r\n}\r\n\r\nexport const removeTodoListAC = (todoListID: string): RemoveTodoListActionType => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        todoListID: todoListID\r\n    }\r\n}\r\nexport const addTodoListAC = (title: string): AddTodoListActionType => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        title: title,\r\n        todoListId: v1()\r\n    }\r\n}\r\nexport const changeTodoListFilterAC = (filter: FilteredValuesType, todoListID: string): ChangeTodoListFilterActionType => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        filter,\r\n        todoListID\r\n    }\r\n}\r\nexport const changeTodoListTitleAC = (title: string, todoListID: string): ChangeTodoListTitleActionType => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        title,\r\n        todoListID\r\n    }\r\n}\r\n","import {TasksStateType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\nimport {TaskType} from \"../TodoList\";\r\nimport {AddTodoListActionType, RemoveTodoListActionType, todoListID_1, todoListID_2} from \"./todolists-reducer\";\r\n\r\ntype RemoveTaskAT = {\r\n    type: 'REMOVE-TASK'\r\n    taskID: string\r\n    todoListID: string\r\n}\r\ntype AddTaskAT = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todoListID: string\r\n}\r\ntype ChangeTaskStatusAT = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    isDone: boolean\r\n    todoListID: string\r\n}\r\ntype ChangeTaskTitleAT = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todoListID: string\r\n}\r\nexport type TasksReducerActionsType = RemoveTaskAT\r\n    | AddTaskAT\r\n    | ChangeTaskStatusAT\r\n    | ChangeTaskTitleAT\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n\r\n//initial state for tasks\r\nconst initState: TasksStateType = {\r\n    [todoListID_1]: [\r\n        {id: v1(), title: \"HTML\", isDone: true},\r\n        {id: v1(), title: \"CSS\", isDone: true},\r\n        {id: v1(), title: \"React\", isDone: false},\r\n        {id: v1(), title: \"Redux\", isDone: false}\r\n    ],\r\n    [todoListID_2]: [\r\n        {id: v1(), title: \"Money\", isDone: true},\r\n        {id: v1(), title: \"Mansions\", isDone: true},\r\n        {id: v1(), title: \"Cars\", isDone: false},\r\n        {id: v1(), title: \"Time\", isDone: false}\r\n    ],\r\n}\r\n\r\n//reducer for all actions on Tasks\r\nexport const tasksReducer = (tasks = initState, action: TasksReducerActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\":\r\n            return {\r\n                ...tasks,\r\n                [action.todoListID]: tasks[action.todoListID].filter(t => t.id !== action.taskID)\r\n            }\r\n        case \"ADD-TASK\":\r\n            const newTask: TaskType = {id: v1(), title: action.title, isDone: false}\r\n            return {\r\n                ...tasks,\r\n                [action.todoListID]: [newTask, ...tasks[action.todoListID]]\r\n            }\r\n        case \"CHANGE-TASK-STATUS\":\r\n            return {\r\n                ...tasks,\r\n                [action.todoListID]: tasks[action.todoListID].map(task => task.id === action.taskId ? {...task, isDone: action.isDone} : task)\r\n            }\r\n        case \"CHANGE-TASK-TITLE\":\r\n            return {\r\n                ...tasks,\r\n                [action.todoListID]: tasks[action.todoListID].map(task => task.id === action.taskId ? {...task, title: action.title} : task)\r\n            }\r\n        case \"ADD-TODOLIST\":\r\n            return {...tasks, [action.todoListId]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const newTasks = {...tasks}\r\n            delete newTasks[action.todoListID]\r\n            return newTasks\r\n        default:\r\n            return tasks\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskID: string, todoListID: string): RemoveTaskAT => {\r\n    return { type: 'REMOVE-TASK', taskID: taskID, todoListID: todoListID }\r\n}\r\nexport const addTaskAC = (title: string, todoListID: string): AddTaskAT => {\r\n    return { type: 'ADD-TASK', title, todoListID }\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todoListID: string): ChangeTaskStatusAT => {\r\n    return { type: 'CHANGE-TASK-STATUS', taskId, isDone, todoListID }\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListID: string): ChangeTaskTitleAT => {\r\n    return { type: 'CHANGE-TASK-TITLE', taskId, title, todoListID }\r\n}\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport TodoList, {TaskType} from \"./TodoList\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, IconButton, Typography, Toolbar, Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodoListAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    removeTodoListAC,\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nexport type FilteredValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilteredValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nconst AppWithRedux = React.memo(function AppWithRedux() {\r\n    console.log('app')\r\n    //BLL\r\n\r\n    //useSelector - getting data from store\r\n    const todoLists = useSelector<AppRootStateType, TodoListType[]>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    //useDispatch - getting dispatch from store\r\n    const dispatch = useDispatch()\r\n\r\n    //todolist actions\r\n    const changeTodoListFilter = useCallback((filter: FilteredValuesType, todoListID: string) => {\r\n        dispatch(changeTodoListFilterAC(filter, todoListID))\r\n    }, [dispatch])\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        dispatch(removeTodoListAC(todoListID))\r\n    }, [dispatch])\r\n    const addTodoList = useCallback((title: string) => {\r\n        let action = addTodoListAC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeTodoListTitle = useCallback((title: string, todoListID: string) => {\r\n        let action = changeTodoListTitleAC(title, todoListID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    //task actions\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(addTaskAC(title, todoListID))\r\n    }, [dispatch])\r\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n        dispatch(removeTaskAC(taskID, todoListID))\r\n    }, [dispatch])\r\n    const changeTaskStatus = useCallback((taskId: string, isDone: boolean, todoListID: string) => {\r\n        dispatch(changeTaskStatusAC(taskId, isDone, todoListID))\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, todoListID: string) => {\r\n        dispatch(changeTaskTitleAC(taskId, title, todoListID))\r\n    }, [dispatch])\r\n\r\n    //variable for todolist jsx\r\n    const todoListComponents = todoLists.map(tl => {\r\n        return (\r\n            <Grid item xs={3} key={tl.id} style={{textAlign: 'center', wordBreak: 'break-word'}}>\r\n                <Paper elevation={5} style={{padding: '5px'}}>\r\n                    <TodoList\r\n                        todoListID={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasks[tl.id]}\r\n                        filter={tl.filter}\r\n                        removeTask={removeTask}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton color={\"inherit\"}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={\"h6\"}>\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button\r\n                        color={\"inherit\"}\r\n                        variant={\"outlined\"}\r\n                    >Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0 10px 0'}} justify={\"center\"}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default AppWithRedux;\r\n","import React from 'react';\r\nimport {Switch, Redirect, Route} from 'react-router-dom';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\n\r\nexport const PATH = {\r\n    APP: '/todolist-app',\r\n}\r\n\r\nfunction Routes() {\r\n    return (\r\n        <div>\r\n            {/*Switch выбирает первый подходящий роут*/}\r\n            <Switch>\r\n\r\n                {/*в начале мы попадаем на страницу '/' и переходим сразу на страницу APP*/}\r\n                {/*exact нужен чтоб указать полное совподение (что после '/' ничего не будет)*/}\r\n                <Route path={'/'} exact render={() => <Redirect to={PATH.APP}/>}/>\r\n\r\n                {/*// add routes*/}\r\n                <Route path={PATH.APP} render={() => <AppWithRedux/>}/>\r\n\r\n                {/*у этого роута нет пути, он отрисуется если пользователь захочет попасть на несуществующую страницу*/}\r\n                {/*тут нужен компонент для роута 404*/}\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Routes\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todoListsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer\r\n})\r\n\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n\r\n// @ts-ignore\r\nwindow.store = store.getState();","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport Routes from \"./RoutesTodoList\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <Routes/>\r\n            {/*<App/>*/}\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}